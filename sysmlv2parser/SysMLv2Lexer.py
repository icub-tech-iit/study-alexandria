# Generated from sysmlv2parser/SysMLv2.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,33,243,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,
        1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,
        1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,5,29,205,
        8,29,10,29,12,29,208,9,29,1,30,4,30,211,8,30,11,30,12,30,212,1,30,
        1,30,4,30,217,8,30,11,30,12,30,218,3,30,221,8,30,1,31,4,31,224,8,
        31,11,31,12,31,225,1,32,1,32,5,32,230,8,32,10,32,12,32,233,9,32,
        1,32,1,32,1,33,4,33,238,8,33,11,33,12,33,239,1,33,1,33,0,0,34,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
        25,51,26,53,27,55,28,57,29,59,30,61,31,63,0,65,32,67,33,1,0,5,3,
        0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,
        10,10,13,13,34,34,3,0,9,10,13,13,32,32,248,0,1,1,0,0,0,0,3,1,0,0,
        0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
        0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
        0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
        0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,
        0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,
        0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,65,1,0,0,0,
        0,67,1,0,0,0,1,69,1,0,0,0,3,71,1,0,0,0,5,75,1,0,0,0,7,77,1,0,0,0,
        9,79,1,0,0,0,11,81,1,0,0,0,13,88,1,0,0,0,15,93,1,0,0,0,17,101,1,
        0,0,0,19,111,1,0,0,0,21,119,1,0,0,0,23,123,1,0,0,0,25,125,1,0,0,
        0,27,127,1,0,0,0,29,129,1,0,0,0,31,131,1,0,0,0,33,133,1,0,0,0,35,
        135,1,0,0,0,37,137,1,0,0,0,39,139,1,0,0,0,41,141,1,0,0,0,43,149,
        1,0,0,0,45,156,1,0,0,0,47,161,1,0,0,0,49,169,1,0,0,0,51,175,1,0,
        0,0,53,178,1,0,0,0,55,182,1,0,0,0,57,193,1,0,0,0,59,202,1,0,0,0,
        61,210,1,0,0,0,63,223,1,0,0,0,65,227,1,0,0,0,67,237,1,0,0,0,69,70,
        5,46,0,0,70,2,1,0,0,0,71,72,5,58,0,0,72,73,5,58,0,0,73,74,5,42,0,
        0,74,4,1,0,0,0,75,76,5,45,0,0,76,6,1,0,0,0,77,78,5,43,0,0,78,8,1,
        0,0,0,79,80,5,44,0,0,80,10,1,0,0,0,81,82,5,105,0,0,82,83,5,109,0,
        0,83,84,5,112,0,0,84,85,5,111,0,0,85,86,5,114,0,0,86,87,5,116,0,
        0,87,12,1,0,0,0,88,89,5,112,0,0,89,90,5,97,0,0,90,91,5,114,0,0,91,
        92,5,116,0,0,92,14,1,0,0,0,93,94,5,112,0,0,94,95,5,97,0,0,95,96,
        5,99,0,0,96,97,5,107,0,0,97,98,5,97,0,0,98,99,5,103,0,0,99,100,5,
        101,0,0,100,16,1,0,0,0,101,102,5,97,0,0,102,103,5,116,0,0,103,104,
        5,116,0,0,104,105,5,114,0,0,105,106,5,105,0,0,106,107,5,98,0,0,107,
        108,5,117,0,0,108,109,5,116,0,0,109,110,5,101,0,0,110,18,1,0,0,0,
        111,112,5,100,0,0,112,113,5,101,0,0,113,114,5,102,0,0,114,115,5,
        97,0,0,115,116,5,117,0,0,116,117,5,108,0,0,117,118,5,116,0,0,118,
        20,1,0,0,0,119,120,5,100,0,0,120,121,5,101,0,0,121,122,5,102,0,0,
        122,22,1,0,0,0,123,124,5,58,0,0,124,24,1,0,0,0,125,126,5,59,0,0,
        126,26,1,0,0,0,127,128,5,123,0,0,128,28,1,0,0,0,129,130,5,125,0,
        0,130,30,1,0,0,0,131,132,5,91,0,0,132,32,1,0,0,0,133,134,5,93,0,
        0,134,34,1,0,0,0,135,136,5,40,0,0,136,36,1,0,0,0,137,138,5,41,0,
        0,138,38,1,0,0,0,139,140,5,61,0,0,140,40,1,0,0,0,141,142,5,73,0,
        0,142,143,5,110,0,0,143,144,5,116,0,0,144,145,5,101,0,0,145,146,
        5,103,0,0,146,147,5,101,0,0,147,148,5,114,0,0,148,42,1,0,0,0,149,
        150,5,83,0,0,150,151,5,116,0,0,151,152,5,114,0,0,152,153,5,105,0,
        0,153,154,5,110,0,0,154,155,5,103,0,0,155,44,1,0,0,0,156,157,5,82,
        0,0,157,158,5,101,0,0,158,159,5,97,0,0,159,160,5,108,0,0,160,46,
        1,0,0,0,161,162,5,66,0,0,162,163,5,111,0,0,163,164,5,111,0,0,164,
        165,5,108,0,0,165,166,5,101,0,0,166,167,5,97,0,0,167,168,5,110,0,
        0,168,48,1,0,0,0,169,170,5,65,0,0,170,171,5,114,0,0,171,172,5,114,
        0,0,172,173,5,97,0,0,173,174,5,121,0,0,174,50,1,0,0,0,175,176,5,
        58,0,0,176,177,5,62,0,0,177,52,1,0,0,0,178,179,5,58,0,0,179,180,
        5,62,0,0,180,181,5,62,0,0,181,54,1,0,0,0,182,183,5,100,0,0,183,184,
        5,105,0,0,184,185,5,109,0,0,185,186,5,101,0,0,186,187,5,110,0,0,
        187,188,5,115,0,0,188,189,5,105,0,0,189,190,5,111,0,0,190,191,5,
        110,0,0,191,192,5,115,0,0,192,56,1,0,0,0,193,194,5,101,0,0,194,195,
        5,108,0,0,195,196,5,101,0,0,196,197,5,109,0,0,197,198,5,101,0,0,
        198,199,5,110,0,0,199,200,5,116,0,0,200,201,5,115,0,0,201,58,1,0,
        0,0,202,206,7,0,0,0,203,205,7,1,0,0,204,203,1,0,0,0,205,208,1,0,
        0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,60,1,0,0,0,208,206,1,0,0,
        0,209,211,3,63,31,0,210,209,1,0,0,0,211,212,1,0,0,0,212,210,1,0,
        0,0,212,213,1,0,0,0,213,220,1,0,0,0,214,216,5,46,0,0,215,217,3,63,
        31,0,216,215,1,0,0,0,217,218,1,0,0,0,218,216,1,0,0,0,218,219,1,0,
        0,0,219,221,1,0,0,0,220,214,1,0,0,0,220,221,1,0,0,0,221,62,1,0,0,
        0,222,224,7,2,0,0,223,222,1,0,0,0,224,225,1,0,0,0,225,223,1,0,0,
        0,225,226,1,0,0,0,226,64,1,0,0,0,227,231,5,34,0,0,228,230,8,3,0,
        0,229,228,1,0,0,0,230,233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,
        0,232,234,1,0,0,0,233,231,1,0,0,0,234,235,5,34,0,0,235,66,1,0,0,
        0,236,238,7,4,0,0,237,236,1,0,0,0,238,239,1,0,0,0,239,237,1,0,0,
        0,239,240,1,0,0,0,240,241,1,0,0,0,241,242,6,33,0,0,242,68,1,0,0,
        0,8,0,206,212,218,220,225,231,239,1,6,0,0
    ]

class SysMLv2Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    IMPORT = 6
    PART = 7
    PACKAGE = 8
    ATTRIBUTE = 9
    DEFAULT = 10
    DEF = 11
    COLON = 12
    SEMICOLON = 13
    LBRACE = 14
    RBRACE = 15
    LBRACK = 16
    RBRACK = 17
    LPAREN = 18
    RPAREN = 19
    EQUALS = 20
    INTEGER = 21
    STRING = 22
    REAL = 23
    BOOLEAN = 24
    ARRAY = 25
    SPECIALIZE = 26
    OVERRIDE = 27
    DIMENSIONS = 28
    ELEMENTS = 29
    ID = 30
    NUMBER = 31
    STR = 32
    WS = 33

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'.'", "'::*'", "'-'", "'+'", "','", "'import'", "'part'", "'package'", 
            "'attribute'", "'default'", "'def'", "':'", "';'", "'{'", "'}'", 
            "'['", "']'", "'('", "')'", "'='", "'Integer'", "'String'", 
            "'Real'", "'Boolean'", "'Array'", "':>'", "':>>'", "'dimensions'", 
            "'elements'" ]

    symbolicNames = [ "<INVALID>",
            "IMPORT", "PART", "PACKAGE", "ATTRIBUTE", "DEFAULT", "DEF", 
            "COLON", "SEMICOLON", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
            "LPAREN", "RPAREN", "EQUALS", "INTEGER", "STRING", "REAL", "BOOLEAN", 
            "ARRAY", "SPECIALIZE", "OVERRIDE", "DIMENSIONS", "ELEMENTS", 
            "ID", "NUMBER", "STR", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "IMPORT", "PART", 
                  "PACKAGE", "ATTRIBUTE", "DEFAULT", "DEF", "COLON", "SEMICOLON", 
                  "LBRACE", "RBRACE", "LBRACK", "RBRACK", "LPAREN", "RPAREN", 
                  "EQUALS", "INTEGER", "STRING", "REAL", "BOOLEAN", "ARRAY", 
                  "SPECIALIZE", "OVERRIDE", "DIMENSIONS", "ELEMENTS", "ID", 
                  "NUMBER", "DIGIT", "STR", "WS" ]

    grammarFileName = "SysMLv2.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


