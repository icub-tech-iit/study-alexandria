# Generated from sysmlv2parser/SysMLv2.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,258,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,
        1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,
        11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,
        18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,
        21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,
        23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,
        25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,
        28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
        29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,5,
        31,220,8,31,10,31,12,31,223,9,31,1,32,4,32,226,8,32,11,32,12,32,
        227,1,32,1,32,4,32,232,8,32,11,32,12,32,233,3,32,236,8,32,1,33,4,
        33,239,8,33,11,33,12,33,240,1,34,1,34,5,34,245,8,34,10,34,12,34,
        248,9,34,1,34,1,34,1,35,4,35,253,8,35,11,35,12,35,254,1,35,1,35,
        0,0,36,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
        25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
        47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,0,
        69,34,71,35,1,0,5,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
        122,1,0,48,57,3,0,10,10,13,13,34,34,3,0,9,10,13,13,32,32,263,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
        0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,1,73,1,0,
        0,0,3,75,1,0,0,0,5,79,1,0,0,0,7,81,1,0,0,0,9,83,1,0,0,0,11,90,1,
        0,0,0,13,95,1,0,0,0,15,103,1,0,0,0,17,113,1,0,0,0,19,121,1,0,0,0,
        21,125,1,0,0,0,23,127,1,0,0,0,25,129,1,0,0,0,27,131,1,0,0,0,29,133,
        1,0,0,0,31,135,1,0,0,0,33,137,1,0,0,0,35,139,1,0,0,0,37,141,1,0,
        0,0,39,143,1,0,0,0,41,145,1,0,0,0,43,153,1,0,0,0,45,160,1,0,0,0,
        47,165,1,0,0,0,49,173,1,0,0,0,51,179,1,0,0,0,53,184,1,0,0,0,55,190,
        1,0,0,0,57,193,1,0,0,0,59,197,1,0,0,0,61,208,1,0,0,0,63,217,1,0,
        0,0,65,225,1,0,0,0,67,238,1,0,0,0,69,242,1,0,0,0,71,252,1,0,0,0,
        73,74,5,46,0,0,74,2,1,0,0,0,75,76,5,58,0,0,76,77,5,58,0,0,77,78,
        5,42,0,0,78,4,1,0,0,0,79,80,5,45,0,0,80,6,1,0,0,0,81,82,5,43,0,0,
        82,8,1,0,0,0,83,84,5,105,0,0,84,85,5,109,0,0,85,86,5,112,0,0,86,
        87,5,111,0,0,87,88,5,114,0,0,88,89,5,116,0,0,89,10,1,0,0,0,90,91,
        5,112,0,0,91,92,5,97,0,0,92,93,5,114,0,0,93,94,5,116,0,0,94,12,1,
        0,0,0,95,96,5,112,0,0,96,97,5,97,0,0,97,98,5,99,0,0,98,99,5,107,
        0,0,99,100,5,97,0,0,100,101,5,103,0,0,101,102,5,101,0,0,102,14,1,
        0,0,0,103,104,5,97,0,0,104,105,5,116,0,0,105,106,5,116,0,0,106,107,
        5,114,0,0,107,108,5,105,0,0,108,109,5,98,0,0,109,110,5,117,0,0,110,
        111,5,116,0,0,111,112,5,101,0,0,112,16,1,0,0,0,113,114,5,100,0,0,
        114,115,5,101,0,0,115,116,5,102,0,0,116,117,5,97,0,0,117,118,5,117,
        0,0,118,119,5,108,0,0,119,120,5,116,0,0,120,18,1,0,0,0,121,122,5,
        100,0,0,122,123,5,101,0,0,123,124,5,102,0,0,124,20,1,0,0,0,125,126,
        5,58,0,0,126,22,1,0,0,0,127,128,5,59,0,0,128,24,1,0,0,0,129,130,
        5,123,0,0,130,26,1,0,0,0,131,132,5,125,0,0,132,28,1,0,0,0,133,134,
        5,91,0,0,134,30,1,0,0,0,135,136,5,93,0,0,136,32,1,0,0,0,137,138,
        5,40,0,0,138,34,1,0,0,0,139,140,5,41,0,0,140,36,1,0,0,0,141,142,
        5,61,0,0,142,38,1,0,0,0,143,144,5,44,0,0,144,40,1,0,0,0,145,146,
        5,73,0,0,146,147,5,110,0,0,147,148,5,116,0,0,148,149,5,101,0,0,149,
        150,5,103,0,0,150,151,5,101,0,0,151,152,5,114,0,0,152,42,1,0,0,0,
        153,154,5,83,0,0,154,155,5,116,0,0,155,156,5,114,0,0,156,157,5,105,
        0,0,157,158,5,110,0,0,158,159,5,103,0,0,159,44,1,0,0,0,160,161,5,
        82,0,0,161,162,5,101,0,0,162,163,5,97,0,0,163,164,5,108,0,0,164,
        46,1,0,0,0,165,166,5,66,0,0,166,167,5,111,0,0,167,168,5,111,0,0,
        168,169,5,108,0,0,169,170,5,101,0,0,170,171,5,97,0,0,171,172,5,110,
        0,0,172,48,1,0,0,0,173,174,5,102,0,0,174,175,5,97,0,0,175,176,5,
        108,0,0,176,177,5,115,0,0,177,178,5,101,0,0,178,50,1,0,0,0,179,180,
        5,116,0,0,180,181,5,114,0,0,181,182,5,117,0,0,182,183,5,101,0,0,
        183,52,1,0,0,0,184,185,5,65,0,0,185,186,5,114,0,0,186,187,5,114,
        0,0,187,188,5,97,0,0,188,189,5,121,0,0,189,54,1,0,0,0,190,191,5,
        58,0,0,191,192,5,62,0,0,192,56,1,0,0,0,193,194,5,58,0,0,194,195,
        5,62,0,0,195,196,5,62,0,0,196,58,1,0,0,0,197,198,5,100,0,0,198,199,
        5,105,0,0,199,200,5,109,0,0,200,201,5,101,0,0,201,202,5,110,0,0,
        202,203,5,115,0,0,203,204,5,105,0,0,204,205,5,111,0,0,205,206,5,
        110,0,0,206,207,5,115,0,0,207,60,1,0,0,0,208,209,5,101,0,0,209,210,
        5,108,0,0,210,211,5,101,0,0,211,212,5,109,0,0,212,213,5,101,0,0,
        213,214,5,110,0,0,214,215,5,116,0,0,215,216,5,115,0,0,216,62,1,0,
        0,0,217,221,7,0,0,0,218,220,7,1,0,0,219,218,1,0,0,0,220,223,1,0,
        0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,64,1,0,0,0,223,221,1,0,0,
        0,224,226,3,67,33,0,225,224,1,0,0,0,226,227,1,0,0,0,227,225,1,0,
        0,0,227,228,1,0,0,0,228,235,1,0,0,0,229,231,5,46,0,0,230,232,3,67,
        33,0,231,230,1,0,0,0,232,233,1,0,0,0,233,231,1,0,0,0,233,234,1,0,
        0,0,234,236,1,0,0,0,235,229,1,0,0,0,235,236,1,0,0,0,236,66,1,0,0,
        0,237,239,7,2,0,0,238,237,1,0,0,0,239,240,1,0,0,0,240,238,1,0,0,
        0,240,241,1,0,0,0,241,68,1,0,0,0,242,246,5,34,0,0,243,245,8,3,0,
        0,244,243,1,0,0,0,245,248,1,0,0,0,246,244,1,0,0,0,246,247,1,0,0,
        0,247,249,1,0,0,0,248,246,1,0,0,0,249,250,5,34,0,0,250,70,1,0,0,
        0,251,253,7,4,0,0,252,251,1,0,0,0,253,254,1,0,0,0,254,252,1,0,0,
        0,254,255,1,0,0,0,255,256,1,0,0,0,256,257,6,35,0,0,257,72,1,0,0,
        0,8,0,221,227,233,235,240,246,254,1,6,0,0
    ]

class SysMLv2Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    IMPORT = 5
    PART = 6
    PACKAGE = 7
    ATTRIBUTE = 8
    DEFAULT = 9
    DEF = 10
    COLON = 11
    SEMICOLON = 12
    LBRACE = 13
    RBRACE = 14
    LBRACK = 15
    RBRACK = 16
    LPAREN = 17
    RPAREN = 18
    EQUALS = 19
    COMMA = 20
    INTEGER = 21
    STRING = 22
    REAL = 23
    BOOLEAN = 24
    FALSE = 25
    TRUE = 26
    ARRAY = 27
    SPECIALIZE = 28
    OVERRIDE = 29
    DIMENSIONS = 30
    ELEMENTS = 31
    ID = 32
    NUMBER = 33
    STR = 34
    WS = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'.'", "'::*'", "'-'", "'+'", "'import'", "'part'", "'package'", 
            "'attribute'", "'default'", "'def'", "':'", "';'", "'{'", "'}'", 
            "'['", "']'", "'('", "')'", "'='", "','", "'Integer'", "'String'", 
            "'Real'", "'Boolean'", "'false'", "'true'", "'Array'", "':>'", 
            "':>>'", "'dimensions'", "'elements'" ]

    symbolicNames = [ "<INVALID>",
            "IMPORT", "PART", "PACKAGE", "ATTRIBUTE", "DEFAULT", "DEF", 
            "COLON", "SEMICOLON", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
            "LPAREN", "RPAREN", "EQUALS", "COMMA", "INTEGER", "STRING", 
            "REAL", "BOOLEAN", "FALSE", "TRUE", "ARRAY", "SPECIALIZE", "OVERRIDE", 
            "DIMENSIONS", "ELEMENTS", "ID", "NUMBER", "STR", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "IMPORT", "PART", "PACKAGE", 
                  "ATTRIBUTE", "DEFAULT", "DEF", "COLON", "SEMICOLON", "LBRACE", 
                  "RBRACE", "LBRACK", "RBRACK", "LPAREN", "RPAREN", "EQUALS", 
                  "COMMA", "INTEGER", "STRING", "REAL", "BOOLEAN", "FALSE", 
                  "TRUE", "ARRAY", "SPECIALIZE", "OVERRIDE", "DIMENSIONS", 
                  "ELEMENTS", "ID", "NUMBER", "DIGIT", "STR", "WS" ]

    grammarFileName = "SysMLv2.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


