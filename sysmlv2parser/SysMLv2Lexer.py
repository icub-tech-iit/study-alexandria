# Generated from sysmlv2parser/SysMLv2.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,229,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,1,0,1,0,1,0,1,0,
        1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,
        1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,
        1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,
        1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,25,1,25,5,25,184,8,25,10,25,12,25,187,9,25,1,26,1,26,
        5,26,191,8,26,10,26,12,26,194,9,26,1,27,4,27,197,8,27,11,27,12,27,
        198,1,27,1,27,4,27,203,8,27,11,27,12,27,204,3,27,207,8,27,1,28,4,
        28,210,8,28,11,28,12,28,211,1,29,1,29,5,29,216,8,29,10,29,12,29,
        219,9,29,1,29,1,29,1,30,4,30,224,8,30,11,30,12,30,225,1,30,1,30,
        0,0,31,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
        25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
        47,24,49,25,51,26,53,27,55,28,57,0,59,29,61,30,1,0,5,3,0,65,90,95,
        95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,10,10,13,13,
        34,34,3,0,9,10,13,13,32,32,235,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
        0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
        0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
        0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
        0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,
        0,59,1,0,0,0,0,61,1,0,0,0,1,63,1,0,0,0,3,67,1,0,0,0,5,69,1,0,0,0,
        7,71,1,0,0,0,9,78,1,0,0,0,11,83,1,0,0,0,13,93,1,0,0,0,15,101,1,0,
        0,0,17,105,1,0,0,0,19,107,1,0,0,0,21,109,1,0,0,0,23,111,1,0,0,0,
        25,113,1,0,0,0,27,115,1,0,0,0,29,117,1,0,0,0,31,119,1,0,0,0,33,121,
        1,0,0,0,35,123,1,0,0,0,37,131,1,0,0,0,39,138,1,0,0,0,41,143,1,0,
        0,0,43,151,1,0,0,0,45,157,1,0,0,0,47,161,1,0,0,0,49,172,1,0,0,0,
        51,181,1,0,0,0,53,188,1,0,0,0,55,196,1,0,0,0,57,209,1,0,0,0,59,213,
        1,0,0,0,61,223,1,0,0,0,63,64,5,58,0,0,64,65,5,58,0,0,65,66,5,42,
        0,0,66,2,1,0,0,0,67,68,5,45,0,0,68,4,1,0,0,0,69,70,5,44,0,0,70,6,
        1,0,0,0,71,72,5,105,0,0,72,73,5,109,0,0,73,74,5,112,0,0,74,75,5,
        111,0,0,75,76,5,114,0,0,76,77,5,116,0,0,77,8,1,0,0,0,78,79,5,112,
        0,0,79,80,5,97,0,0,80,81,5,114,0,0,81,82,5,116,0,0,82,10,1,0,0,0,
        83,84,5,97,0,0,84,85,5,116,0,0,85,86,5,116,0,0,86,87,5,114,0,0,87,
        88,5,105,0,0,88,89,5,98,0,0,89,90,5,117,0,0,90,91,5,116,0,0,91,92,
        5,101,0,0,92,12,1,0,0,0,93,94,5,100,0,0,94,95,5,101,0,0,95,96,5,
        102,0,0,96,97,5,97,0,0,97,98,5,117,0,0,98,99,5,108,0,0,99,100,5,
        116,0,0,100,14,1,0,0,0,101,102,5,100,0,0,102,103,5,101,0,0,103,104,
        5,102,0,0,104,16,1,0,0,0,105,106,5,58,0,0,106,18,1,0,0,0,107,108,
        5,59,0,0,108,20,1,0,0,0,109,110,5,123,0,0,110,22,1,0,0,0,111,112,
        5,125,0,0,112,24,1,0,0,0,113,114,5,91,0,0,114,26,1,0,0,0,115,116,
        5,93,0,0,116,28,1,0,0,0,117,118,5,40,0,0,118,30,1,0,0,0,119,120,
        5,41,0,0,120,32,1,0,0,0,121,122,5,61,0,0,122,34,1,0,0,0,123,124,
        5,73,0,0,124,125,5,110,0,0,125,126,5,116,0,0,126,127,5,101,0,0,127,
        128,5,103,0,0,128,129,5,101,0,0,129,130,5,114,0,0,130,36,1,0,0,0,
        131,132,5,83,0,0,132,133,5,116,0,0,133,134,5,114,0,0,134,135,5,105,
        0,0,135,136,5,110,0,0,136,137,5,103,0,0,137,38,1,0,0,0,138,139,5,
        82,0,0,139,140,5,101,0,0,140,141,5,97,0,0,141,142,5,108,0,0,142,
        40,1,0,0,0,143,144,5,66,0,0,144,145,5,111,0,0,145,146,5,111,0,0,
        146,147,5,108,0,0,147,148,5,101,0,0,148,149,5,97,0,0,149,150,5,110,
        0,0,150,42,1,0,0,0,151,152,5,65,0,0,152,153,5,114,0,0,153,154,5,
        114,0,0,154,155,5,97,0,0,155,156,5,121,0,0,156,44,1,0,0,0,157,158,
        5,58,0,0,158,159,5,62,0,0,159,160,5,62,0,0,160,46,1,0,0,0,161,162,
        5,100,0,0,162,163,5,105,0,0,163,164,5,109,0,0,164,165,5,101,0,0,
        165,166,5,110,0,0,166,167,5,115,0,0,167,168,5,105,0,0,168,169,5,
        111,0,0,169,170,5,110,0,0,170,171,5,115,0,0,171,48,1,0,0,0,172,173,
        5,101,0,0,173,174,5,108,0,0,174,175,5,101,0,0,175,176,5,109,0,0,
        176,177,5,101,0,0,177,178,5,110,0,0,178,179,5,116,0,0,179,180,5,
        115,0,0,180,50,1,0,0,0,181,185,7,0,0,0,182,184,7,1,0,0,183,182,1,
        0,0,0,184,187,1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,52,1,0,
        0,0,187,185,1,0,0,0,188,192,7,0,0,0,189,191,7,1,0,0,190,189,1,0,
        0,0,191,194,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,54,1,0,0,
        0,194,192,1,0,0,0,195,197,3,57,28,0,196,195,1,0,0,0,197,198,1,0,
        0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,206,1,0,0,0,200,202,5,46,
        0,0,201,203,3,57,28,0,202,201,1,0,0,0,203,204,1,0,0,0,204,202,1,
        0,0,0,204,205,1,0,0,0,205,207,1,0,0,0,206,200,1,0,0,0,206,207,1,
        0,0,0,207,56,1,0,0,0,208,210,7,2,0,0,209,208,1,0,0,0,210,211,1,0,
        0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,58,1,0,0,0,213,217,5,34,
        0,0,214,216,8,3,0,0,215,214,1,0,0,0,216,219,1,0,0,0,217,215,1,0,
        0,0,217,218,1,0,0,0,218,220,1,0,0,0,219,217,1,0,0,0,220,221,5,34,
        0,0,221,60,1,0,0,0,222,224,7,4,0,0,223,222,1,0,0,0,224,225,1,0,0,
        0,225,223,1,0,0,0,225,226,1,0,0,0,226,227,1,0,0,0,227,228,6,30,0,
        0,228,62,1,0,0,0,9,0,185,192,198,204,206,211,217,225,1,6,0,0
    ]

class SysMLv2Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    IMPORT = 4
    PART = 5
    ATTRIBUTE = 6
    DEFAULT = 7
    DEF = 8
    COLON = 9
    SEMICOLON = 10
    LBRACE = 11
    RBRACE = 12
    LBRACK = 13
    RBRACK = 14
    LPAREN = 15
    RPAREN = 16
    EQUALS = 17
    INTEGER = 18
    STRING = 19
    REAL = 20
    BOOLEAN = 21
    ARRAY = 22
    SPECIALIZE = 23
    DIMENSIONS = 24
    ELEMENTS = 25
    ID = 26
    SPECIALIZATION = 27
    NUMBER = 28
    STR = 29
    WS = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'::*'", "'-'", "','", "'import'", "'part'", "'attribute'", 
            "'default'", "'def'", "':'", "';'", "'{'", "'}'", "'['", "']'", 
            "'('", "')'", "'='", "'Integer'", "'String'", "'Real'", "'Boolean'", 
            "'Array'", "':>>'", "'dimensions'", "'elements'" ]

    symbolicNames = [ "<INVALID>",
            "IMPORT", "PART", "ATTRIBUTE", "DEFAULT", "DEF", "COLON", "SEMICOLON", 
            "LBRACE", "RBRACE", "LBRACK", "RBRACK", "LPAREN", "RPAREN", 
            "EQUALS", "INTEGER", "STRING", "REAL", "BOOLEAN", "ARRAY", "SPECIALIZE", 
            "DIMENSIONS", "ELEMENTS", "ID", "SPECIALIZATION", "NUMBER", 
            "STR", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "IMPORT", "PART", "ATTRIBUTE", 
                  "DEFAULT", "DEF", "COLON", "SEMICOLON", "LBRACE", "RBRACE", 
                  "LBRACK", "RBRACK", "LPAREN", "RPAREN", "EQUALS", "INTEGER", 
                  "STRING", "REAL", "BOOLEAN", "ARRAY", "SPECIALIZE", "DIMENSIONS", 
                  "ELEMENTS", "ID", "SPECIALIZATION", "NUMBER", "DIGIT", 
                  "STR", "WS" ]

    grammarFileName = "SysMLv2.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


